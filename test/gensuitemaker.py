# This file is under GNU General Public License 3.0
# see LICENSE.txt

from os import listdir, getcwd
from os.path import isfile, join
from re import sub
import datetime

srcpath = join(getcwd(), "src/engine_tests")

ls = listdir(srcpath)

suites = []

indent = "    "

for f in ls:
    if isfile(join(srcpath, f)):
        if (f.endswith(".cc")):
            suite = sub('\.cc$', '', f)
            suites.append(suite)

license = (''
'// This file is under GNU General Public License 3.0\n'
'// see LICENSE.txt\n\n')


header = license + "//\n// src/SuiteMaker.cc generated by gensuitemaker.py - changes may be overwritten. You've been warned!\n//\n\n"

header += (''
'#include <cpptest.h>\n'
'#include <cpptest-suite.h>\n'
'#include <memory>\n'
'#include <vector>\n'
'#include "SuiteMaker.h"\n')

suiteincludes = ""

for s in suites:
    suiteincludes += '#include "' + s + '.h"\n'

output = header + "\n// Begin where we generate stuff\n" + suiteincludes + "\n"

output += ("\n"
"const char* SuiteMaker::all_suites[] = {\n")

first = True

for s in suites:
    output += indent + '"' + s + '",\n'

output += "};\n\n"

output += (
'// This file is generated, so magic constants are ok.\n'
'int SuiteMaker::num_suites = ')

output += str(len(suites)) + ";\n\n"
    
output += "void SuiteMaker::suitemaker_build(const char* test_class_name, const char* test_home, Test::Suite** test_suite) {\n"

first = True

for s in suites:
    output += indent
    
    if not first:
        output += "else "
    else:
        first = False
    
    output += ('if (strcmp(test_class_name, "' + s + '") == 0)\n' + 
               indent + indent + '*test_suite = new ' + s + '(test_class_name, test_home);\n')
        
output += "}\n\n"

output += (
'void SuiteMaker::suitemaker_buildlist(const char** test_class_names, int num_to_run, const char* test_home, std::vector<Test::Suite*>& test_suites) {\n'
'    for (int i = 0; i < num_to_run; i++) {\n'
'        Test::Suite* suite = NULL;\n'
'        SuiteMaker::suitemaker_build(test_class_names[i], test_home, &suite);\n'
'        if (!suite)\n'
'            throw std::runtime_error("Could not create a test suite instance."); // FIXME, better error, cleanup, obviously\n'
'        test_suites.push_back(suite);\n'
'    }\n'    
'}'
'\n'
'void SuiteMaker::suitemaker_buildall(const char* test_home, std::vector<Test::Suite*>& test_suites) {\n'
'    SuiteMaker::suitemaker_buildlist(SuiteMaker::all_suites, SuiteMaker::num_suites, test_home, test_suites);\n'
'}\n\n')

suitemaker = open("src/SuiteMaker.cc", 'w') 
suitemaker.write(output)
suitemaker.close()

generated_at = ("src/SuiteMaker.cc" + " generated at " + datetime.datetime.now().strftime('%c'))
print(generated_at)
