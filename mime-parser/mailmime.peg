Mail                    <-      ( Header )+ CRLF ( Body )? EOF

# As pretty as it would be to make the header parse elegant, 
# the parse semantics work better this way.
# Marginally, a header is HeaderKey COLON HeaderValue (with some
# lines possible afterwards), but we have some specific headers that
# have meaning, so they are explicit here.
Header                  <-      MIMEHeader / MessageHeader / GenericHeader

GenericHeader           <-      HeaderKey COLON HeaderText
HeaderKey               <-      ( Alpha / Digit / OrdinarySymbol )+
HeaderText              <-      HeaderLine ( HeaderCont )*
HeaderCont              <-      Whitespace HeaderLine
HeaderLine              <-      Text* CRLF

#MIME Header Blocks

# MessageHeaders      <-      (EntityHeaderBlock Fields MIMEVersionHeader) /
#                             (EntityHeaderBlock MIMEVersionHeader Fields) /
#                             (MIMEVersionHeader Fields EntityHeaderBlock) /
#                             (MIMEVersionHeader EntityHeaderBlock Fields) /
#                             (Fields EntityHeaderBlock MIMEVersionHeader) /
#                             (Fields MIMEVersionHeader EntityHeaderBlock)

# Horrible def.
# MessagePartHeaders         <-      Field* EntityHeaderBlock Field* 

#MIMEMessageHeaderBlock  <-      EntityHeaderBlock   
#                                (Field* EntityHeaderBlock)

# Not really clear if this ordering matters. Sigh.
#EntityHeaderBlock       <-      MIMEContentTypeHeader? MIMETransfEncodeHeader? MIMEContentIDHeader? MIMEContentDescHeader? MIMEExtensionHeader* 

#Fields                  <-      MessageHeader / GenericHeader

# Mime-related headers
MIMEHeader              <-      MIMEVersionHeader /
                                MIMEContentIDHeader /
                                MIMEContentTypeHeader /
                                MIMETransfEncodeHeader /
                                MIMEContentDescHeader /
                                MIMEExtensionHeader


MIMEExtensionHeader     <-      MIMEContentDispoHeader / MIMEGenericExtHeader
MIMEVersionHeader       <-      MIMEVersionKey COLON VersionString
MIMEContentTypeHeader   <-      MIMEContentTypeKey COLON ContentTypeString
MIMEContentIDHeader     <-      MIMEContentIDKey COLON ContentIDString
MIMETransfEncodeHeader  <-      MIMETransfEncodeKey COLON TransfEncodeString
MIMEContentDescHeader   <-      MIMEContentDescKey COLON ContentDescString

MIMEContentDispoHeader  <-      MIMEContentDispoKey COLON ContentDispoString
MIMEGenericExtHeader    <-      MIMEExtensionKey COLON ExtensionString

MIMEVersionKey          <-      'MIME-Version'
MIMEContentTypeKey      <-      'Content-Type'
MIMEContentDispoKey     <-      'Content-Disposition'
MIMETransfEncodeKey     <-      'Content-Transfer-Encoding'
MIMEContentIDKey        <-      'Content-ID'
MIMEContentDescKey      <-      'Content-Description'
MIMEExtensionKey        <-      'Content-'HeaderKey

#VersionString           <-      Text* Digit Text* "." Text* Digit Text* 
VersionString           <-      HeaderText
ContentTypeString       <-      ContentType "/" ContentSubtype (";" Parameter)*
ContentDispoString      <-      HeaderText
TransfEncodeString      <-      "7bit" / "8bit" / "binary" /
                                "quoted-printable" / "base64" /
                                IETFToken / XToken
ContentIDString         <-      HeaderText
ContentDescString       <-      HeaderText
ExtensionString         <-      HeaderText

# RFC2045 Section 5 - we should extend these to ones we care about
ContentType             <-      DiscreteContentType / CompositeContentType
DiscreteContentType     <-      "text" / "image" / "audio" / 
                                "video" / "application" / 
                                ExtensionToken
CompositeContentType    <-      "message" / "multipart" / 
                                ExtensionToken
ExtensionToken          <-      XToken / IETFToken
XToken                  <-      "X-" Text
IETFToken               <-      Text
ContentSubtype          <-      ExtensionToken / IANAToken
IANAToken               <-      Text
Parameter               <-      Attribute "=" Value #attribute matching always case insensitive
Attribute               <-      Token
Value                   <-      Token / QuotedString
Token                   <-      SymbolNoTSpecials+



# Message-related headers (per RFC2822)
MessageHeader           <-      MessageIDHeader /
                                MessageToHeader /
                                MessageFromHeader /
                                MessageCCHeader /
                                MessageBCCHeader /
                                MessageSubjHeader /
                                MessageReplyToHeader /
                                MessageInReplyToHeader /
                                MessageRefsHeader      
                                
MessageIDHeader         <-      MessageIDKey COLON IDString
MessageToHeader         <-      MessageToKey COLON ToString
MessageFromHeader       <-      MessageFromKey COLON FromString
MessageCCHeader         <-      MessageCCKey COLON CCString
MessageBCCHeader        <-      MessageBCCKey COLON BCCString
MessageSubjHeader       <-      MessageSubjKey COLON SubjString
MessageReplyToHeader    <-      MessageReplyToKey COLON ReplyToString
MessageInReplyToHeader  <-      MessageInReplyToKey COLON InReplyToString
MessageRefsHeader       <-      MessageRefsKey COLON RefsString
MessageIDKey            <-      'Message-ID'
MessageToKey            <-      'To'
MessageFromKey          <-      'From'
MessageCCKey            <-      'Cc'
MessageBCCKey           <-      'Bcc'
MessageSubjKey          <-      'Subject'
MessageReplyToKey       <-      'Reply-To'
MessageInReplyToKey     <-      'In-Reply-To'
MessageRefsKey          <-      'References'  
IDString                <-      HeaderText
ToString                <-      HeaderText
FromString              <-      HeaderText
CCString                <-      HeaderText
BCCString               <-      HeaderText
SubjString              <-      HeaderText
ReplyToString           <-      HeaderText
InReplyToString         <-      HeaderText
RefsString              <-      HeaderText


                        
Body                <-      PlainBody
PlainBody           <-      .* EOF

Encapsulation       <-      Delimiter BodyPart CRLF
CloseDelimiter      <-      Delimiter "--"
Delimiter           <-      CRLF DashBoundary
BodyPart            <-      MIMEHeader+ (CRLF OCTET*)?
DashBoundary        <-      "--" Boundary
Boundary            <-      < BChars* BCharsNoSpace >
BCharsNoSpace       <-      BChars / Space
BChars              <-      Digit / Alpha / "'" / "(" / ")" /
                            "+" / "_" / "," / "-" / "." /
                            "/" / ":" / "=" / "?"
Preamble            <-      DiscardText
Epilogue            <-      DiscardText
DiscardText         <-      ((!CRLF)* CRLF)* (!CRLF)*

CContent            <-      CText / QuotedPair / Comment
CFWS                <-      (FoldingWhiteSpace? Comment)* ((FoldingWhiteSpace? Comment) / FoldingWhiteSpace)
Comment             <-      "(" ([FoldingWhiteSpace]? CContent)* FoldingWhiteSpace? ")"
FoldingWhiteSpace   <-      (Whitespace* CRLF)? Whitespace+ /   
                            Whitespace+ (CRLF Whitespace+)*
CText               <-      NoWSCtl / 
                            Alpha / Digit / CommentSymbols
QuotedString        <-      CFWS '"' (FoldingWhiteSpace? QuotedContent)* FoldingWhiteSpace? '"'
QuotedContent       <-      QText / QuotedPair
QText               <-      !["\"" "\\" CR]
QuotedPair          <-      "\\". / "\\" Text

Text                <-      ( Alpha / Digit / Symbol / Space )+
Alpha               <-      [a-zA-Z]
Digit               <-      [0-9]*
Symbol              <-      OrdinarySymbol / COLON
Whitespace          <-      Space+
Space               <-      [' ' '\t']

OrdinarySymbol      <-      ["!" "#" "$" "%" "&" "'" "*" "+" "\-" "/" "=" "?" "^" "_" "`" "{" "|" "}" "~" "\[" "\]" "@" ";" "." "<" ">" "\"" "(" ")" "," "\\"]
SymbolNoTSpecials   <-      ["!" "#" "$" "%" "&" "'" "*" "+" "-" "." "^" "_" "`" "{" "|" "}" "~"]
CommentSymbols      <-      [\041-\047] / [\52-57] / [\072-\100] / [\133] / [\135-\140] / [\173-177]

OCTET               <-      '\\' (([0-1] [0-9] [0-9]) / ("2" (([0-4] [0-9]) / ("5" [0-5])))) 
COLON               <-      ':'
NEWLINE             <-      '\n'
CR                  <-      '\r'
CRLF                <-      CR CR? NEWLINE 
EOF                 <-      !.
NoWSCtl             <-      [\001-\010] / [\013-\014] / [\016-\037] / [\177]