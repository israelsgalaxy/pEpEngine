// generate state machine code

// Copyleft (c) 2016, p≡p foundation

// Written by Volker Birk

include yslt.yml2

tstylesheet {
    template "/protocol/fsm"
    ||
    // state machine for «@name»

    #include "pEpEngine.h"

    typedef enum _fsm_error {
        invalid_state = -1,
        invalid_event = -2
    } fsm_error;

    typedef enum _«@name»_state {
    `` apply "state", mode=declare
    } «@name»_state;

    typedef enum _«@name»_event {
    `` apply "state/event", mode=declare
    } «@name»_event;

    «@name»_state fsm_«@name»(«@name»_state state, «@name»_event event)
    {
        switch (state) {
            `` apply "state", mode=implement
            default:
                return invalid_state;
        }
    }

    ||

    template "state", mode=declare
        | «@name»`if "position()!=last()" > , `

    template "state", mode=implement
    ||
    case «@name»:
        switch (event) {
        `` apply "event", 2
        default:
            return invalid_event;
        }
        break;

    ||

    template "event", mode=declare
        | «@name»`if "position()!=last()" > , `

    template "event"
    ||
    case «@name»:
    `` apply "action|transition";
        break;
    ||

    template "action" | «@name»();
    template "transition" | return «@target»;
}

