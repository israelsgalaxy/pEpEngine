// generate state machine code

// Copyleft (c) 2016, p≡p foundation

// Written by Volker Birk

include yslt.yml2

tstylesheet {
    include ./functions.ysl2

    template "/protocol/fsm" {
        document "../src/sync_fsm.h", "text"
        ||
        #pragma once

        // state machine for «@name»

        #include "pEpEngine.h"

        // types

        typedef pEp_identity * Identity;
        typedef union _param { const Identity partner; const stringlist_t *keylist; } param_t;

        // error values

        typedef enum _fsm_error {
            invalid_state = -1,
            invalid_event = -2
        } fsm_error;

        // states

        typedef enum _«@name»_state {
        `` for "func:distinctName(state)" |> «@name»`if "position()!=last()" > , `
        } «@name»_state;

        // events

        typedef enum _«@name»_event {
        `` for "func:distinctName(state/event)" |> «@name»`if "position()!=last()" > , `
        } «@name»_event;

        // actions

        `` for "func:distinctName(//action)" | PEP_STATUS «@name»(const Identity partner);

        // driver

        PEP_STATUS fsm_«@name»_inject(PEP_SESSION session, «@name»_event event);

        ||
        ||
        #include "sync_fsm.h"

        // state machine for «@name»

        «@name»_state fsm_«@name»(
                «@name»_state state,
                «@name»_event event,
                const Identity partner
            )
        {
            switch (state) {
                `` apply "state"
                default:
                    return invalid_state;
            }

            return state;
        }

        ||
    }

    template "state"
    ||
    case «@name»:
        switch (event) {
        `` apply "event", 2
        default:
            return invalid_event;
        }
        break;

    ||

    template "event"
    ||
    case «@name»:
    `` apply "action|transition";
    `` if "name(*[position()=last()]) != 'transition'" |> break;
    ||

    template "action" {
        indent(0);
        > «@name»(
        choose {
            when "parm" > «name(parm/*)»
            otherwise > NULL
        }
        > );\n
    }

    template "transition" | return «@target»;
}

