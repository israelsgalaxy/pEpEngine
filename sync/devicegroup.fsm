// This file is under GNU General Public License 3.0
// see LICENSE.txt

// DeviceGroup protocol for p≡p

// Copyleft (c) 2016, p≡p foundation

// Written by Volker Birk

include ./fsm.yml2

protocol DeviceGroup {
    // all messages have a timestamp, time out and are removed after timeout

    broadcast sendBeacon;
    broadcast sendGroupUpdate;
    broadcast sendUpdateRequest;
    unencrypted sendBeacon;

    fsm DeviceState filename=sync {
        condition storedGroupKeys();
        condition keyElectionWon(Identity partner);

        state InitState {
            on Init {
                if storedGroupKeys()
                    go Grouped;
                go Sole;
            }
        }

        state Sole end=1 {
            on KeyGen // injected by generate_keypair()
                do sendBeacon;
            on CannotDecrypt
                do sendBeacon;  // cry, baby
            on Beacon(Identity partner) // this event will not happen for already
                                        // rejected partners
                do sendHandshakeRequest(partner);
            on HandshakeRequest(Identity partner) {
                do sendHandshakeRequest(partner);
                go HandshakingSole(partner);
            }
        }

        state HandshakingSole timeout=600 (Identity expected) {
            on Init{
                if keyElectionWon(partner) {    // an already existing group
                    do notifyInitFormGroup(partner);
                } else {
                    do notifyInitAddOurDevice(partner);
                }
            }

            on HandshakeRejected(Identity partner) {
                do rejectHandshake(partner);             // stores rejection of partner
                go Sole;
            }
            on HandshakeAccepted(Identity partner) {
                do acceptHandshake(partner); 
                if keyElectionWon(partner) {    // an already existing group
                                                // always wins
                    do sendGroupKeys(partner);
                    do notifyAcceptedGroupCreated(partner);
                    go Grouped;
                }
                go WaitForGroupKeysSole(partner);
            }
            on Cancel go Sole;
            on Timeout {
                do notifyTimeout(expected);
                go Sole;
            }
        }
    
        state WaitForGroupKeysSole timeout=600 (Identity expected) {
            on GroupKeys(Identity partner, Stringlist keys) {
                // TODO ensure partner == expected
                do storeGroupKeys(partner, keys);
                do notifyAcceptedDeviceAdded(partner);
                go Grouped;
            }
            on Timeout {
                do notifyTimeout(expected);
                go Sole;
            }
        }

        state Grouped end=1 {
            on Init 
                do enterGroup;
            on KeyGen
                do sendGroupUpdate;
            on CannotDecrypt
                do sendUpdateRequest; // TODO: narrow request to missing key
            on UpdateRequest
                do sendGroupUpdate;
            on Beacon(Identity partner)
                do sendHandshakeRequest(partner);
            on HandshakeRequest(Identity partner) {
                do sendHandshakeRequest(partner);
                go HandshakingGrouped(partner);
            }
            on GroupUpdate(Identity partner, Stringlist keys)
                do storeGroupKeys(partner, keys);
        }

        state HandshakingGrouped timeout=600 (Identity expected) {
            on Init
                do notifyInitAddOurDevice(partner);
            on HandshakeRejected(Identity partner) {
                do rejectHandshake(partner);             // stores rejection of partner
                go Grouped;
            }
            on HandshakeAccepted(Identity partner) {
                do acceptHandshake(partner); 

                // an already existing group always wins
                do sendGroupKeys(partner);

                go Grouped;
            }
            on Timeout {
                do notifyTimeout(expected);
                go Grouped;
            }
        }

        tag Init 1;
        tag Beacon 2;
        tag HandshakeRequest 3;
        tag GroupKeys 4;
    }
}

