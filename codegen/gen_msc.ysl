include yslt.yml2

tstylesheet {
    template "/protocol/fsm[1]" {
        const "msc"
            ||
              # The entities
              ua [label="Alice\\\\nUser"], a [label="Alice\\\\nDevice"], b [label="Bob\\\\nDevice"], ub [label="Bob\\\\nUser"];
           
              # Small gap before the boxes
              |||;
           
              # Next two on same line due to ','
              a box a [label="Sole"],
              b box b [label="Sole"];
            ||
            apply "/protocol/fsm[1]/state[@name='Sole']/event[@name='NegotiationRequest']", 1
                    with "commPartnerState", "'Sole'",
                    with "whoAmI", "'a'",
                    with "commPartner", "'b'",
                    with "msc", "$msc";
    }

    template "protocol/fsm[1]/*/event" {
        param "commPartnerState";
        param "whoAmI";
        param "commPartner";
        param "msc";
        const "ownState", "parent::state/@name";
        const "stopTheRecursion", "parent::state/@timeout='on' or $_indent>20";

        for("descendant::send[1]") {
            const "message", "@name";
            const "condition", "ancestor::condition/@name";
            const "target" 
                        choose {
                            when "following-sibling/transition/@name"
                                value "following-sibling/transition/@name";
                            otherwise
                                value "ancestor::state/@name";
                        }; //choose, defining $target
 | Message «$message»
 | condition «$condition»
 | target «$target»
 | commPartnerState «$commPartnerState»
 | whoami «$whoAmI»
 | commPartner «$commPartner»
 | ownState «$ownState»
 | stop «$stopTheRecursion»
 | indent «$_indent»


            choose {
                when "stopTheRecursion" {
                    | msc {
                    |    «$msc»
                    | }
                }
                when "$message and $target=$ownState and $_indent<20" {
                    const "newmsc"
                        value "$msc"
                        | «$whoAmI» -> «$commPartner» [label="«$message»"];
                    apply "/protocol/fsm[1]/state[@name=$commPartnerState]/event[@name=$message]"
                        with "commPartnerState", "$ownState",
                        with "whoAmI", "$commPartner",
                        with "commPartner", "$whoAmI",
                        with "msc", "$msc";
                }
                when "$message and not($target=$ownState)" {
                    const "newmsc"
                        value "$msc"
                        | «$whoAmI» -> «$commPartner» [label="«$message»"];
                        | «$whoAmI» box «$whoAmI»     [label="«$target»"];
                    apply "/protocol/fsm[1]/state[@name=$commPartnerState]/event[@name=$message]"
                        with "commPartnerState", "$target",
                        with "whoAmI", "$commPartner",
                        with "commPartner", "$whoAmI",
                        with "msc", "$msc";
                }
                when "not($message or $target=$ownState)" {
                    const "newmsc"
                        value "$msc"
                        | «$whoAmI» box «$whoAmI»     [label="«$target»"];
                    apply "/protocol/fsm[1]/state[@name=$target]/event[@name='Init']"
                        with "commPartnerState", "$commPartnerState",
                        with "whoAmI", "$whoAmI",
                        with "commPartner", "$commPartner",
                        with "msc", "$msc";

                }
            } //choose
            
                        
                        
                        
                        
                        
//        value "/protocol/fsm[1]/state[@name=$target]/@timeout"
//                value "ancestor::state/@timeout"
//            if "not(/protocol/fsm[1]/state[@name=$target]/@timeout='off')" {
//              | off
//              apply "/protocol/fsm[1]/state[@name=$target]/event[@name=$message]";
//            }
//            if "ancestor::state/@timeout='off'" {
//            if "$_indent div 4<5" {
//              | on
//            if "/protocol/fsm[1]/state[@name=$target]/event[@name=$message]/send/@name=@name" {
//              | same
//              apply "/protocol/fsm[1]/state[@name=$target]/event[@name=$message]";
//            }}//if if
                        
                        
        } //for
    } //template
} //tstylesheet

