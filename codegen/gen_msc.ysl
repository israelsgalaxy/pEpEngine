include yslt.yml2

tstylesheet {
    const "maxdepth", "15";
    const "mindepth", "4";

    template "/protocol" {
    const "whoAmI", "'a'";
    const "commPartner", "'b'";

    apply "/protocol/fsm[1]"
        with "whoAmI", "$whoAmI",
        with "commPartner", "$commPartner",
        with "ownState", "'Grouped'",
        with "commPartnerState", "'Sole'",
        with "message", "'CannotDecrypt'";

    apply "/protocol/fsm[1]"
        with "whoAmI", "$whoAmI",
        with "commPartner", "$commPartner",
        with "ownState", "'Sole'",
        with "commPartnerState", "'Sole'",
        with "message", "'CannotDecrypt'";

    apply "/protocol/fsm[1]"
        with "whoAmI", "$whoAmI",
        with "commPartner", "$commPartner",
        with "ownState", "'Sole'",
        with "commPartnerState", "'Grouped'",
        with "message", "'CannotDecrypt'";

    apply "/protocol/fsm[1]"
        with "whoAmI", "$whoAmI",
        with "commPartner", "$commPartner",
        with "ownState", "'Grouped'",
        with "commPartnerState", "'Grouped'",
        with "message", "'CannotDecrypt'";
    }

    template "/protocol/fsm[1]" {
        param "ownState";
        param "commPartnerState";
        param "whoAmI";
        param "commPartner";
        param "message";
        const "msc"
            ||
              # The entities
              ua [label="Alice\\\\nUser"], a [label="Alice\\\\nDevice"], b [label="Bob\\\\nDevice"], ub [label="Bob\\\\nUser"];
           
              # Small gap before the boxes
              |||;
           
              # Next two on same line due to ','
              «$whoAmI» box «$whoAmI» [label="«$ownState»"],
              «$commPartner» box «$commPartner» [label="«$commPartnerState»"];
              u«$whoAmI» -> «$whoAmI» [label="«$message»"];
            ||
            apply "//state[@name=$ownState]/event[@name=$message]", 1
                    with "commPartnerState", "$commPartnerState",
                    with "whoAmI", "$whoAmI",
                    with "commPartner", "$commPartner",
                    with "depth", "0",
                    with "msc", "$msc";
    } //template

    template "protocol/fsm[1]/*/event" {
        param "commPartnerState";
        param "whoAmI";
        param "commPartner";
        param "msc";
	param "log";
        param "depth";

        for ("descendant::condition|descendant::else") {
            call "nextStep"
                with "commPartnerState", "$commPartnerState",
                with "whoAmI", "$whoAmI",
                with "commPartner", "$commPartner",
                with "msc", "$msc",
                with "log", "$log",
                with "depth", "$depth";
        }
        call "nextStep"
            with "commPartnerState", "$commPartnerState",
            with "whoAmI", "$whoAmI",
            with "commPartner", "$commPartner",
            with "msc", "$msc",
            with "log", "$log",
            with "depth", "$depth";
    } //template event

    function "nextStep" {
        param "commPartnerState";
        param "whoAmI";
        param "commPartner";
        param "msc";
        param "depth";
        param "log";
        const "event", "ancestor-or-self::event/@name";
        const "ownState", "ancestor::state/@name";
        const "eventString" if "/protocol/fsm[1]/external[@name=$event]" {
           | u«$whoAmI» -> «$whoAmI» [label="«$event»"];
                };
        const "message", "child::send[1]/@name";
        const "condition", "ancestor-or-self::condition/@name";
        const "target", "child::transition[1]/@target";   
        const "stopCondition", "(ancestor::state/@timeout='off'  and $depth>$mindepth) or (//state[@name=$target]/@timeout='off' and //state[@name=$commPartnerState]/@timeout='off' and $depth>$mindepth) or $depth>$maxdepth or ($commPartnerState='End' and $target='End')";
//and //state[@name=$commPartnerState]/@timeout='off'

        const "newlog" {
         value "$log";
         | ----------------------------------------------------------------------------------
         | «$whoAmI»: at «$ownState» on «$event» if «$condition» send «$message» go «$target» 
         | «$commPartner»: «$commPartnerState»
         | stop «//state[@name=$ownState]/@timeout» and  «//state[@name=$commPartnerState]/@timeout» and «$depth»>«$mindepth»
         | stop «$stopCondition»
//         value "$msc";
        };
        const "search" {
            | «$whoAmI» -> «$commPartner» [label="«$message»"];
        };
        choose {
            // First check for abort condition(s)
            when "contains($msc, $search)" {
                value "$newlog"
                | loop detected «$depth»
            }
            // Then for ground conditions
            when "$stopCondition" {
                const "secid", "math:random()";
                const "id", "concat(generate-id(),substring($secid,3,6))";
                const "stateString" choose {
                    when ("$target and not($target=$ownState)") {
                    |    «$whoAmI» box «$whoAmI» [label="«$target»"],
                    }
                    otherwise {
                    |    «$whoAmI» box «$whoAmI» [label="«$ownState»"],
                    }
                };
                | ===========================================================================
                | doc «$depth», «$id»:
                value "$newlog";
                | STOP
 //               value "$msc";
                document "msc/{$id}.msc" method="text" {
                    | msc {
                    |    «$msc»
                    value "$stateString";
                    |    «$commPartner» box «$commPartner» [label="«$commPartnerState»"];
                    | }
                }
            }
            // Then choose the path to proceed
            when "$message and ($target=$ownState or not($target))" {
                const "newmsc" {
                    value "$msc";
                    |   «$eventString»
                    |   «$whoAmI» -> «$commPartner» [label="«$message»"];
                };
                const "nextlog" {
                    value "$newlog";
                    |  b «$depth» 
                };
                apply "/protocol/fsm[1]/state[@name=$commPartnerState]/event[@name=$message]"
                    with "commPartnerState", "$ownState",
                    with "whoAmI", "$commPartner",
                    with "commPartner", "$whoAmI",
                    with "depth", "$depth+1",
                    with "log", "$nextlog",
                    with "msc", "$newmsc";
            }
            when "$message and $target and not($target=$ownState) and $eventString" {
                const "nextlog" {
                    value "$newlog";
                    |  c «$depth» , «$eventString»
                };
               const "newmsc" {
                    value "$msc";
                    |   «$eventString»
                    |   «$whoAmI» -> «$commPartner» [label="«$message»"];
                    |   «$whoAmI» box «$whoAmI»     [label="«$target»"];
                };
      //    |      apply "/protocol/fsm[1]/state[@name=«$commPartnerState»]/event[@name=«$message»]"
      //    |          with "commPartnerState", "«$target»",
      //    |          with "whoAmI", "«$commPartner»",
      //    |          with "commPartner", "«$whoAmI»",
      //    |          with "depth", "«$depth+1»",
      //    |          with "msc", "$newmsc";
                apply "/protocol/fsm[1]/state[@name=$commPartnerState]/event[@name=$message]"
                    with "commPartnerState", "$target",
                    with "whoAmI", "$commPartner",
                    with "commPartner", "$whoAmI",
                    with "depth", "$depth+1",
                    with "log", "$nextlog",
                    with "msc", "$newmsc";
            }
            when "not($message) and $target and not($target=$ownState)" {
                const "nextlog" {
                    value "$newlog";
                    |  d «$depth», «$eventString»
                };
                const "newmsc" {
                    value "$msc";
                    |   «$eventString»
                    |   «$whoAmI» box «$whoAmI» [label="«$target»"];
                };
                //apply "/protocol/fsm[1]/state[@name=$target]/event[@name='Init']"
                //const "eventString" if
                for "/protocol/fsm[1]/state[@name=$target]/event" {
                    const "name", "@name";
                    | «./@name», «$name»
                    | «count(/protocol/fsm[1]/external[@name=$name])»
                    if "boolean(/protocol/fsm[1]/external[@name=$name])" {
                        apply "."
                            with "commPartnerState", "$commPartnerState",
                            with "whoAmI", "$whoAmI",
                            with "commPartner", "$commPartner",
                            with "depth", "$depth+1",
                            with "log", "$nextlog",
                            with "msc", "$newmsc";
                    }
                }
      //          apply "/protocol/fsm[0]/state[@name=$target]/event"
      //              with "commPartnerState", "$commPartnerState",
      //              with "whoAmI", "$whoAmI",
      //              with "commPartner", "$commPartner",
      //              with "depth", "$depth+1",
      //              with "log", "$nextlog",
      //              with "msc", "$newmsc";
            }
            otherwise {
value "$newlog"
| o «$depth»
          //      | msc {
          //      |    «$msc»
          //      | }
            }
        } //choose
    } //function nextStep
} //tstylesheet

