include yslt.yml2

tstylesheet {
    const "maxdepth", "7";
    const "mindepth", "3";

    template "/protocol/fsm[1]" {
        const "msc"
            ||
              # The entities
              ua [label="Alice\\\\nUser"], a [label="Alice\\\\nDevice"], b [label="Bob\\\\nDevice"], ub [label="Bob\\\\nUser"];
           
              # Small gap before the boxes
              |||;
           
              # Next two on same line due to ','
              a box a [label="Sole"],
              b box b [label="Sole"];
            ||
            apply "//state[@name='Sole']/event[@name='NegotiationRequest']", 1
            //apply "//state[@name='HandshakingToJoin']/event[@name='Accept']", 1
                    with "commPartnerState", "'Sole'",
                    with "whoAmI", "'a'",
                    with "commPartner", "'b'",
                    with "depth", "0",
                    with "msc", "$msc";
//            apply "/protocol/fsm[1]/state[@name='Sole']/event[@name='NegotiationOpen']", 1
//                    with "commPartnerState", "'Sole'",
//                    with "whoAmI", "'a'",
//                    with "commPartner", "'b'",
//                    with "msc", "$msc";
    } //template

    template "protocol/fsm[1]/*/event" {
        param "commPartnerState";
        param "whoAmI";
        param "commPartner";
        param "msc";
        param "depth";

        for ("descendant::condition|descendant::else") {
            call "nextStep"
                with "commPartnerState", "$commPartnerState",
                with "whoAmI", "$whoAmI",
                with "commPartner", "$commPartner",
                with "msc", "$msc",
                with "depth", "$depth";
        }
        call "nextStep"
            with "commPartnerState", "$commPartnerState",
            with "whoAmI", "$whoAmI",
            with "commPartner", "$commPartner",
            with "msc", "$msc",
            with "depth", "$depth";
    } //template event

    function "nextStep" {
        param "commPartnerState";
        param "whoAmI";
        param "commPartner";
        param "msc";
        param "depth";
        const "event", "ancestor-or-self::event/@name";
        const "ownState", "ancestor::state/@name";
        const "eventString" if "/protocol/fsm[1]/external[@name=$event]" {
           | u«$whoAmI» -> «$whoAmI» [label="«$event»"];
                }

        const "message", "child::send[1]/@name";
        const "condition", "ancestor-or-self::condition/@name";
        const "target", "child::transition[1]/@target";   
        const "stopCondition", "(parent::state/@timeout='off' and //state[@name=$commPartnerState]/@timeout='off' and $depth>$mindepth) or $depth>$maxdepth";


            choose {
                when "$stopCondition" {
 | a «$depth»
const "id", "generate-id()";
document "msc/{$id}.msc" method="text" {
                    | msc {
                    |    «$msc»
                    | }
}
                }
                when "$message and ($target=$ownState or not($target))" {
 | b «$depth»
                    const "newmsc" {
                        value "$msc";
                        |   «$eventString»
                        |   «$whoAmI» -> «$commPartner» [label="«$message»"];
                    };
                    apply "/protocol/fsm[1]/state[@name=$commPartnerState]/event[@name=$message]"
                        with "commPartnerState", "$ownState",
                        with "whoAmI", "$commPartner",
                        with "commPartner", "$whoAmI",
                        with "depth", "$depth+1",
                        with "msc", "$newmsc";
                }
                when "$message and $target and not($target=$ownState)" {
 | c «$depth»
                   const "newmsc" {
                        value "$msc";
                        |   «$eventString»
                        |   «$whoAmI» -> «$commPartner» [label="«$message»"];
                        |   «$whoAmI» box «$whoAmI»     [label="«$target»"];
                    };
          //    |      apply "/protocol/fsm[1]/state[@name=«$commPartnerState»]/event[@name=«$message»]"
          //    |          with "commPartnerState", "«$target»",
          //    |          with "whoAmI", "«$commPartner»",
          //    |          with "commPartner", "«$whoAmI»",
          //    |          with "depth", "«$depth+1»",
          //    |          with "msc", "$newmsc";
                    apply "/protocol/fsm[1]/state[@name=$commPartnerState]/event[@name=$message]"
                        with "commPartnerState", "$target",
                        with "whoAmI", "$commPartner",
                        with "commPartner", "$whoAmI",
                        with "depth", "$depth+1",
                        with "msc", "$newmsc";
                }
                when "not($message) and $target and not($target=$ownState)" {
 | d «$depth»
                    const "newmsc" {
                        value "$msc";
                        |   «$eventString»
                        |   «$whoAmI» box «$whoAmI» [label="«$target»"];
                    };
                    //apply "/protocol/fsm[1]/state[@name=$target]/event[@name='Init']"
                    apply "/protocol/fsm[1]/state[@name=$target]/event"
                        with "commPartnerState", "$commPartnerState",
                        with "whoAmI", "$whoAmI",
                        with "commPartner", "$commPartner",
                        with "depth", "$depth+1",
                        with "msc", "$newmsc";
                }
                otherwise {
 | o «$depth»
// | Message «$message»
 | ownState «$ownState»
 | event «$event»
 | condition «$condition»
// | target «$target» 
// | commPartnerState «$commPartnerState»
// | whoami «$whoAmI»
// | commPartner «$commPartner»
// | stop «$stopCondition»
// | indent «$depth»
              //      | msc {
              //      |    «$msc»
              //      | }
                }
            } //choose
    } //function nextStep
} //tstylesheet

